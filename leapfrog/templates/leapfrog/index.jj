{% extends "leapfrog/base.jj" %}

{% block settings %}
    {{ super() }}

    {% if stream_items %}
        <div id="new-updates">
            <div class="inner">
                <a href="{{ url_for('home') }}">
                    <span class="items"></span>
                    <span class="and">and</span>
                    <span class="replies"></span>
                </a>
                <span class="loading">Reloading... <img src="{{ url_for('leapfrog-static', path='img/loadinfo.net.gif') }}" width="16" height="16" alt=""></span>
            </div>
        </div>
    {% endif %}

    <div id="keyboard-shortcuts" class="hidden">
        <div class="inner">
            <h3>Keyboard shortcuts</h3>
            <div>
                <code>r .</code> reload the page for new items<br>
                <code>t u</code> scroll to top<br>
                <code>j n</code> next item<br>
                <code>k p</code> previous item<br>
                <code>b ‚èé</code> open the current item<br>
                <code>  f</code> favorite/like the current item<br>
                <code>  ?</code> close this guide
            </div>
        </div>
    </div>
{% endblock %}

{% block content %}

    {% if stream_items %}
        {% for item in stream_items %}
            {% include "leapfrog/streamitem.jj" %}
        {% endfor %}

        <div id="navigate" class="item">
            <span id="navigate-load-more"><a href="#">Load more</a></span>
            <span id="navigate-loading">Loading... <img src="{{ url_for('leapfrog-static', path='img/loadinfo.net.gif') }}" width="16" height="16"></span>
        </div>

        <script type="text/javascript">
        var maxstreamitem = {{ maxstreamitem }};
        var maxreplyitem = {{ maxreplyitem }};
        var pagetitle = '{{ page_title|replace("'", "\\'") }}';

        var oldest_item_date = '{{ stream_items[-1].time.strftime('%Y-%m-%dT%H:%M:%S') }}';
        var showing_more = false;

        function showMore() {
            if (showing_more)
                return;
            showing_more = true;

            $('#navigate-load-more').hide();
            $('#navigate-loading').show();

            var $nav = $('#navigate');
            $.ajax({
                url: '{{ url_for('stream') }}',
                data: { html: true, before: oldest_item_date },
                success: function (data) {
                    var $nextpage = $('<div/>');
                    $nav.before($nextpage);

                    var items = data['items'];
                    var had_new = false;
                    $.each(items, function (i, val) {
                        if (!$('#item-' + val['id']).size()) {
                            $nextpage.append(val['html']);
                            had_new = true;
                        }
                    });

                    if (!had_new) {
                        $('#navigate').text('All done! No more items!');
                        return;  // still "showing_more"
                    }

                    $('#navigate-load-more').show();
                    $('#navigate-loading').hide();

                    oldest_item_date = items.slice(-1)[0]['time'];
                    showing_more = false;

                    $nextpage.find('.relativedatestamp').each(function (i, val) {
                        $(val).html($.relatizeDate.timeAgoInWords(new Date($(val).attr('title')), true));
                    });
                    setUpResponseLinks($nextpage);
                    setUpSfwProtection($nextpage);

                    $nextpage.children().unwrap();
                },
                error: function (xhr) {
                    $('#navigate').text(xhr.responseText);

                    showing_more = false;
                }
            });
        }

        function setUpPaginator() {
            $(window).scroll(function () {
                if ($(window).scrollTop() > $(document).height() - 3 * $(window).height()) {
                    showMore();
                }
            });
        }

        function checkForUpdates() {
            $.getJSON('{{ url_for('new-items') }}', {maxstreamitem: maxstreamitem, maxreplyitem: maxreplyitem}, function (data) {
                var totalnew = data['streamitems'] + data['replyitems'];
                if (totalnew) {
                    document.title = '(' + totalnew + ') ' + pagetitle;

                    var $nupdates = $('#new-updates');
                    if (data['streamitems'])
                        $nupdates.find('.items').text(data['streamitems'] + ' new ' + (data['streamitems'] > 1 ? 'items' : 'item')).show();
                    if (data['replyitems'])
                        $nupdates.find('.replies').text(data['replyitems'] + ' new ' + (data['replyitems'] > 1 ? 'replies' : 'reply')).show();
                    if (data['streamitems'] && data['replyitems'])
                        $nupdates.find('.and').show();
                    $nupdates.show();
                }
            });
        }

        function setUpResponseLinks($root) {
            if (!$root)
                $root = $(document);

            $root.find('.response-twitter .reply').click(function () {
                {% if ganalytics_code %}
                _gaq.push(['_trackPageview', '/goal/feedback/twitterreply']);
                {% endif %}

                // This is how (roughly) twitter says to do it.
                var targethref = $(this).attr('href'),
                    windowOptions = 'scrollbars=yes,resizable=yes,toolbar=no,location=yes',
                    winHeight = screen.height,
                    winWidth = screen.width,
                    width = 550,
                    height = 420;  // we're only tweeting, which is short

                var left = Math.round((winWidth - width) / 2);
                var top = winHeight <= height ? 0 : Math.round((winHeight - height) / 2);
                window.open(targethref, 'intent', windowOptions + ',width=' + width + ',height=' + height
                    + ',left=' + left + ',top=' + top);

                return false;
            });
            $root.find('.response-typepad .favorite').click(function () {
                {% if ganalytics_code %}
                _gaq.push(['_trackPageview', '/goal/feedback/typepadfav']);
                {% endif %}

                var $favlink = $(this);
                if ($favlink.hasClass('nogo')) {
                    return false;
                }
                $favlink.addClass('spinning');

                $.ajax({
                    url: '{{ url_for('action-typepad-favorite') }}',
                    type: 'POST',
                    data: {'post': $favlink.parent('.response').attr('data-post')},
                    dataType: 'text',
                    success: function (data) {
                        $favlink.removeClass('spinning');
                        $favlink.addClass('favorited');
                        $favlink.text("Marked a favorite!");
                    },
                    error: function (xhr) {
                        $favlink.removeClass('spinning');
                        $favlink.addClass('nogo');
                        if (xhr.responseText == "Can't favorite Group assets") {
                            $favlink.text("Can't favorite posts from TypePad Groups :(");
                        }
                        else {
                            $favlink.text(xhr.responseText);
                        }
                    }
                });

                return false;
            });
            $root.find('.response-flickr .favorite').click(function () {
                {% if ganalytics_code %}
                _gaq.push(['_trackPageview', '/goal/feedback/flickrfav']);
                {% endif %}

                var $favlink = $(this);
                $favlink.addClass('spinning');

                $.ajax({
                    url: '{{ url_for('action-flickr-favorite') }}',
                    type: 'POST',
                    data: {'photo': $favlink.parent('.response-flickr').attr('data-photo')},
                    dataType: 'text',
                    success: function (data) {
                        $favlink.removeClass('spinning');
                        $favlink.addClass('favorited');
                        $favlink.text("Marked a favorite!");
                    },
                    error: function (xhr) {
                        $favlink.removeClass('spinning');
                        $favlink.addClass('nogo');
                        $favlink.text(xhr.responseText);
                    }
                });

                return false;
            });
            $root.find('.response-tumblr .favorite').click(function () {
                {% if ganalytics_code %}
                _gaq.push(['_trackPageview', '/goal/feedback/tumblrlike']);
                {% endif %}

                var $favlink = $(this);
                $favlink.addClass('spinning');

                $.ajax({
                    url: '{{ url_for('action-tumblr-like') }}',
                    type: 'POST',
                    data: {'post': $favlink.parent('.response-tumblr').attr('data-post')},
                    dataType: 'text',
                    success: function (data) {
                        $favlink.removeClass('spinning');
                        $favlink.addClass('favorited');
                        $favlink.text("Liked it!");
                    },
                    error: function (xhr) {
                        $favlink.removeClass('spinning');
                        $favlink.addClass('nogo');
                        $favlink.text(xhr.responseText);
                    }
                });

                return false;
            });
            $root.find('.response-mlkshk .favorite').click(function () {
                {% if ganalytics_code %}
                _gaq.push(['_trackPageview', '/goal/feedback/mlkshklike']);
                {% endif %}

                var $favlink = $(this);
                $favlink.addClass('spinning');

                $.ajax({
                    url: '{{ url_for('action-mlkshk-like') }}',
                    type: 'POST',
                    data: {'post': $favlink.parent('.response-mlkshk').attr('data-post')},
                    dataType: 'text',
                    success: function (data) {
                        $favlink.removeClass('spinning');
                        $favlink.addClass('favorited');
                        $favlink.text("Liked it!");
                    },
                    error: function (xhr) {
                        $favlink.removeClass('spinning');
                        $favlink.addClass('nogo');
                        $favlink.text(xhr.responseText);
                    }
                });

                return false;
            });
        }

        function setUpSfwProtection($root) {
            if (!$root)
                $root = $(document);

            $root.find('.sfw-protection').click(function (e) {
                $(this).replaceWith($(this).children());
                return false;
            });
        }

        function updateTimestamps() {
            $('.relativedatestamp').each(function (i, val) {
                $(val).html($.relatizeDate.timeAgoInWords(new Date($(val).attr('title')), true));
            });
        }

        function currentItem() {
            var $items = $('#content .item');
            var $page = $('body');
            var chooseLine = $page.scrollTop() + 60;

            // TODO: do something less naive than count through every item in the page
            var $candidateItem;
            var $nextItem;
            $items.each(function (i, val) {
                $candidateItem = $nextItem || $(val);
                $nextItem = $(val);
                return $nextItem.offset().top <= chooseLine;
            });

            return $candidateItem;
        }

        function scrollPageTo($page, pos) {
            var posDiff = Math.abs($page.scrollTop() - pos);
            return $page.animate({ scrollTop: pos }, posDiff < 100 ? posDiff : 100);
        }

        function keyshort(evt) {
            if (document.activeElement.localName.toLowerCase() == 'input' || document.activeElement.localName.toLowerCase() == 'textarea')
                return;

            if (evt.metaKey)
                return true;

            // Let's do all the shortcuts that don't need a "this" item.
            var $page = $('body');

            // r, .: reload to get new items
            if (evt.charCode == 114 || evt.charCode == 46) {
                $('#new-updates a').hide();
                $('#new-updates .loading').show();
                $('#new-updates').show();

                // Update with new content... but we do that by reloading.
                if ($page.size() && $page.scrollTop() > 0) {
                    scrollPageTo($page, 0).queue(function (next) {
                        window.location.reload();
                        next();
                    });
                }
                else {
                    window.location.reload();
                }
                return;
            }
            // t, u: scroll to top
            else if (evt.charCode == 116 || evt.charCode == 117) {
                scrollPageTo($page, 0);
                return;
            }
            // /, ?: toggle shortcut help
            else if (evt.charCode == 47 || evt.charCode == 63) {
                $('#keyboard-shortcuts').toggle();
                if ($('#keyboard-shortcuts:visible').size()) {
                    var newleft = $('#keyboard-shortcuts').width() / 2 - $('#keyboard-shortcuts .inner').width() / 2;
                    $('#keyboard-shortcuts .inner').css({ left: newleft + 'px' });
                }
                return;
            }

            // Skip out if it's not one of the other keys we handle.
            if (-1 == $.inArray(evt.charCode, [102, 106, 110, 107, 112, 98, 13])) {
                return;
            }

            var $currentItem = currentItem();

            // j, n: next item
            if (evt.charCode == 106 || evt.charCode == 110) {
                var $nextItem = $currentItem.next('.item');
                if (!$nextItem.size())
                    return;

                var nextPos = $nextItem.offset().top - 30;
                scrollPageTo($page, nextPos);
            }
            // k, p: previous item
            else if (evt.charCode == 107 || evt.charCode == 112) {
                // Assume we're really only going to the top of the current item.
                var $prevItem = $currentItem;

                // But if we're at the top of the current item, go to the previous.
                var chooseLine = $page.scrollTop() - 60;
                if ($currentItem.offset().top > chooseLine)
                    $prevItem = $currentItem.prev('.item');

                if (!$prevItem.size())
                    return;

                var prevPos = $prevItem.prev('.item').size() ? $prevItem.offset().top - 30 : 0;
                scrollPageTo($page, prevPos);
            }
            // b, enter: open the current item in a background tab
            else if (evt.charCode == 98 || evt.charCode == 13) {
                var $permalink = $currentItem.find('a.permalink');

                // If your browser doesn't open links in new tabs... sorry.
                window.open($permalink.attr('href'));
                // Open the link "in the background" by coming back
                // immediately. Since this happens for a keypress,
                // Chrome at least lets us.
                window.focus();
            }
            // f: favorite/like this item
            else if (evt.charCode == 102) {
                $currentItem.find('.metadata .response .favorite').click();
            }
        }

        function csrf_getCookie(name) {
            var cookieValue = null;
            if (document.cookie && document.cookie != '') {
                var cookies = document.cookie.split(';');
                for (var i = 0; i < cookies.length; i++) {
                    var cookie = jQuery.trim(cookies[i]);
                    // Does this cookie string begin with the name we want?
                    if (cookie.substring(0, name.length + 1) == (name + '=')) {
                        cookieValue = decodeURIComponent(cookie.substring(name.length + 1));
                        break;
                    }
                }
            }
            return cookieValue;
        }
        function csrf_sameOrigin(url) {
            // url could be relative or scheme relative or absolute
            var host = document.location.host; // host + port
            var protocol = document.location.protocol;
            var sr_origin = '//' + host;
            var origin = protocol + sr_origin;
            // Allow absolute or scheme relative URLs to same origin
            return (url == origin || url.slice(0, origin.length + 1) == origin + '/') ||
                (url == sr_origin || url.slice(0, sr_origin.length + 1) == sr_origin + '/') ||
                // or any other URL that isn't scheme relative or absolute i.e relative.
                !(/^(\/\/|http:|https:).*/.test(url));
        }
        function csrf_safeMethod(method) {
            return (/^(GET|HEAD|OPTIONS|TRACE)$/.test(method));
        }

        $(document).ready(function () {
            setUpPaginator();
            setUpResponseLinks();
            setUpSfwProtection();
            $('#navigate-load-more a').click(function () {
                showMore();
                return false;
            });
            setInterval("checkForUpdates()", 3 * 60 * 1000);
            updateTimestamps();
            setInterval("updateTimestamps()", 60 * 1000);
            $(window).keypress(keyshort);

            $(document).ajaxSend(function(event, xhr, settings) {
                if (!csrf_safeMethod(settings.type) && csrf_sameOrigin(settings.url)) {
                    xhr.setRequestHeader("X-CSRFToken", csrf_getCookie('csrftoken'));
                }
            });
        });
        </script>
    {% else %}
        <div class="item">
            <div class="item-content">
                <h1 class="title">Welcome!</h1>
                <div>
                    We're looking for your stuff so check back in a minute.
                    <img src="{{ url_for('leapfrog-static', path='img/loadinfo.net.gif') }}" width="16" height="16" alt="">
                </div>
            </div>
        </div>

        <script type="text/javascript">
            function checkForUpdates() {
                $.getJSON('{{ url_for('new-items') }}', {maxstreamitem: 0, maxreplyitem: 0}, function (data) {
                    if (data['streamitems'] || data['replyitems'])
                        window.location.reload();
                });
            }

            checkForUpdates();
            $(document).ready(function () {
                setInterval("checkForUpdates()", 60 * 1000);
            });
        </script>
    {% endif %}

{% endblock %}
